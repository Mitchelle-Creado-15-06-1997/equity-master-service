{
    "swagger": "2.0",
    "info": {
      "description": "Enum Service - to get list of enums",
      "version": "v1",
      "title": "ENUM SERVICE",
      "contact": {
        "email": "Mitchelle.Creado@neo-wealth.com"
      }
    },
    "host": "3.108.51.242:8001",
    "basePath": "/enum",
    "tags": [
      {
        "name": "Enum",
        "description": "GET API for enum"
      }
    ],
    "schemes": [
      "http"
    ],
    "paths": {
      "/v1/data": {
        "get": {
          "tags": [
            "Enum"
          ],
          "summary": "Gets list of enums depending on the vendor/mapping keys",
          "description": "By passing in the appropriate options, you can search for\navailable enums in the system\n",
          "operationId": "getEnum",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "vendor",
              "in": "query",
              "description": "pass an optional search string for looking up enum",
              "required": false,
              "type": "string"
            },
            {
              "name": "mapping_key",
              "in": "query",
              "description": "pass an optional search string for looking up enum",
              "required": false,
              "type": "string"
            },
            {
              "name": "mapping_name",
              "in": "query",
              "description": "pass an optional search string for looking up enum",
              "required": false,
              "type": "string"
            },
            {
              "name": "type_key",
              "in": "query",
              "description": "pass an optional search string for looking up enum",
              "required": false,
              "type": "string"
            },
            {
                "name": "client_code",
                "in": "header",
                "description": "for equity - neo-equity",
                "required": true,
                "type": "string"
              }
          ],
          "responses": {
            "200": {
              "description": "Enum data got",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/getEnum"
                }
              }
            },
            "400": {
                "description": "Client-code not found in headers",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/enumError"
                  }
                }
              },
            "412": {
              "description": "bad input parameter"
            }
          }
        }
      }
    },
    "definitions": {
      "getEnum": {
        "type": "object",
        "properties": {
          "vendor": {
            "type": "string",
            "example": "CMOT"
          },
          "mapping_key": {
            "type": "string",
            "example": "BSE"
          },
          "mapping_name": {
            "type": "string",
            "example": "BSE"
          },
          "type_key": {
            "type": "string",
            "example": "exchange_type"
          }
        }
      },
      "enumError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad Schema"
          },
          "code": {
            "type": "string",
            "example": "SCHEMA_ERROR"
          },
          "stack": {
            "type": "string",
            "example": "Error: Bad Schema\n    at HeaderValidator.prepareValidationErrorObj (/Users/neo-world/git/equity/emum-service/validators/base.validator.js:8:11)\n    at HeaderValidator.create (/Users/neo-world/git/equity/emum-service/validators/header.validator.js:15:10)\n    at module.exports (/Users/neo-world/git/equity/emum-service/middleware/request.middleware.js:32:14)\n    at Layer.handle [as handle_request] (/Users/neo-world/git/equity/emum-service/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/Users/neo-world/git/equity/emum-service/node_modules/express/lib/router/index.js:328:13)\n    at /Users/neo-world/git/equity/emum-service/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/Users/neo-world/git/equity/emum-service/node_modules/express/lib/router/index.js:346:12)\n    at next (/Users/neo-world/git/equity/emum-service/node_modules/express/lib/router/index.js:280:10)\n    at SendStream.error (/Users/neo-world/git/equity/emum-service/node_modules/serve-static/index.js:121:7)\n    at SendStream.emit (node:events:527:28)\n    at SendStream.error (/Users/neo-world/git/equity/emum-service/node_modules/send/index.js:270:17)\n    at SendStream.onStatError (/Users/neo-world/git/equity/emum-service/node_modules/send/index.js:417:12)\n    at next (/Users/neo-world/git/equity/emum-service/node_modules/send/index.js:731:16)\n    at onstat (/Users/neo-world/git/equity/emum-service/node_modules/send/index.js:720:14)\n    at FSReqCallback.oncomplete (node:fs:198:21)\n    at FSReqCallback.callbackTrampoline (node:internal/async_hooks:130:17)"
          },
          "fields": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/fields"
            }
          }
        }
      },
      "fields": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "example": "instance requires property \"client_code\""
          }
        }
      }
    }
  }